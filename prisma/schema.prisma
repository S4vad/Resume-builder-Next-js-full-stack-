datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}

 
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}

 
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  Authenticator Authenticator[]
  resume     Resume[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template{
  id        String @id @default(auto())  @db.ObjectId @map("_id") 
  name      String
  preview   String
  resume    Resume[]
}

model Resume {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @db.ObjectId
  templateId    String?  @db.ObjectId
  title         String
  full_name     String?
  designation  String?
  summary       String?
  address       String?
  email         String?
  phone         String?
  linkdin       String?
  github        String?
  portfolio     String?
 skills     String[]   @default([])
 languages  String[]   @default([])
 intrests   String[]   @default([])
  experience    Experience[]
  education     Education[]
  project       Project[]
  certification Certification[]
  progression   Int? 
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template      Template? @relation(fields: [templateId], references: [id], onDelete:Cascade)
}

model Experience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  resumeId    String   @db.ObjectId
  company     String?
  role        String?
  location    String?
  startDate   DateTime?
  endDate     DateTime?
  description String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Education {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  resumeId  String   @db.ObjectId
  degree    String?
  institute String?
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Project {
  id          String   @id @db.ObjectId @default(auto()) @map("_id")
  resumeId    String   @db.ObjectId
  title       String?
  description String?
  github      String?
  live        String?
  startDate   DateTime?
  endDate     DateTime?
  technologies  String[] @default([])
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  resume      Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}

model Certification {
  id        String   @id @db.ObjectId @default(auto()) @map("_id")
  resumeId  String   @db.ObjectId
  title     String?
  year      DateTime?
  link      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  resume    Resume   @relation(fields: [resumeId], references: [id], onDelete: Cascade)
}